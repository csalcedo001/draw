#version 330 core

// Ouput data
out vec4 FragColor;

// Values received by vertex shader
in vec3 Normal;
in vec3 FragPos;

uniform vec3 cameraPos;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 objectColor;




void main()
{
    vec3 norm = normalize(Normal);

    // ambient
    float ka = 0.2;
    vec3 ambient = ka * lightColor;
  	
    // diffuse 
    float kd = 0.8;
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = kd * diff * lightColor;

    // especular
    float ke = 1.0;
    vec3 cameraDir = normalize(cameraPos - FragPos);
    vec3 reflection = 2 * norm * dot(norm, lightDir) - lightDir;
    vec3 especular = ke * lightColor * max(dot(cameraDir, reflection), 0.0);
            
    vec3 result = (ambient + diffuse + especular) * objectColor;
    FragColor = vec4(result, 1.0);
}
